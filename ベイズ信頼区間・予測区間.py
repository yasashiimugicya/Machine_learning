# -*- coding: utf-8 -*-
"""ベイズ信頼区間・予測区間.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SbV8og4n05ZDSrxBh0YwNRZFV7YQhwik
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pystan
from scipy.stats import mstats
# %matplotlib inline

plt.style.use("ggplot")

df = pd.read_excel("./data/real_estate1.xlsx")

stan_model = """
data {
  int N;
  real X[N];
  real Y[N];
  int N_s;
  real X_s[N_s];
}

parameters {
  real a;
  real b;
  real<lower=0> sigma;
}

model {
  for (n in 1:N){
    Y[n] ~ normal(a * X[n] + b, sigma);
  }
}

generated quantities {
  real Y_s[N_s];
  for (n in 1:N_s){
    Y_s[n] = normal_rng(a * X_s[n] + b, sigma);
  }
}

"""

sm = pystan.StanModel(model_code=stan_model)

X_s = np.arange(40,90,1)
N_s = X_s.shape[0]
stan_data = {"N":df.shape[0],"X":df["space"],"Y":df["value"],"N_s":N_s,"X_s":X_s}

fit = sm.sampling(data = stan_data, iter = 2000, warmup= 500, chains= 3, seed=123)

fit.extract("a")

ms_a = fit.extract("a")["a"]

ms_a

plt.hist(ms_a)

ms_b = fit.extract("b")["b"]

df_b = pd.DataFrame([])
for i in range(40, 90, 1):
    df_b[i] = ms_a * i + ms_b

df_b

low_y50, high_y50 = mstats.mquantiles(df_b, [0.25,0.75], axis=0)
low_y95, high_y95 = mstats.mquantiles(df_b, [0.025,0.975], axis=0)

plt.scatter(df["space"],df["value"])
plt.fill_between(X_s, low_y50, high_y50, alpha=0.6, color="darkgray")
plt.fill_between(X_s, low_y95, high_y95, alpha=0.3, color="gray")
a = 78.3
b = -713.7
y = a * X_s + b
plt.plot(X_s, y, color ="black")

Y_p = fit.extract("Y_s")["Y_s"]

low_y, high_y = mstats.mquantiles(Y_p, [0.025,0.975], axis=0)

plt.scatter(df["space"],df["value"])
plt.fill_between(X_s, low_y, high_y, alpha=0.3, color="gray")
a = 78.3
b = -713.7
y = a * X_s + b
plt.plot(X_s, y, color ="black")

