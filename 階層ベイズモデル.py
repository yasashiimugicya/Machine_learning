# -*- coding: utf-8 -*-
"""階層ベイズモデル.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JNarohavKF-XOv4R_3F9XC2lvllDX5JZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import mstats
import pystan
# %matplotlib inline

plt.style.use("ggplot")

df = pd.read_excel("./data/multilevel_modeling.xlsx")

df.head()

df["id"].unique()

groups = df.groupby(df["id"])

plt.figure(figsize=(9,9))
for name, group in groups:
    plt.plot(group["age"],group["height"],label=name)
plt.legend()

stan_model = """
data {
  int N;
  int N_id;
  real X[N];
  real Y[N];
  int<lower=1, upper=N_id> s_id[N];
}

parameters {
  real a0;
  real b0;
  real a_id[N_id];
  real b_id[N_id];
  real<lower=0> s_a;
  real<lower=0> s_b;
  real<lower=0> s_Y;
}

transformed parameters {
  real a[N_id];
  real b[N_id];
  for (n in 1:N_id){
    a[n] = a0 + a_id[n];
    b[n] = b0 + b_id[n];
  }
}

model {
  for (id in 1:N_id){
    a_id[id] ~ normal(0, s_a);
    b_id[id] ~ normal(0, s_b);
  }
  
  for (n in 1:N){
    Y[n] ~ normal(a[s_id[n]] * X[n] + b[s_id[n]], s_Y);
  }
}

"""

sm = pystan.StanModel(model_code=stan_model)

stan_data = {"N":df.shape[0], "N_id":15, "X":df["age"], "Y":df["height"], "s_id":df["id"]}

fit = sm.sampling(data = stan_data, iter=3000, warmup=1000, chains=3, seed=123)

fit

fig = fit.plot()

ms_a = fit.extract("a")["a"]
ms_b = fit.extract("b")["b"]

x = np.arange(18)
df_b = pd.DataFrame([])
for i in range(18):
    df_b[i] = ms_a[:,0] * x[i] + ms_b[:,0]

low_y50, high_y50 = mstats.mquantiles(df_b, [0.25, 0.75], axis=0)
low_y95, high_y95 = mstats.mquantiles(df_b, [0.025, 0.975], axis=0)

df_0 = groups.get_group(1)

df_0.head()

plt.plot(df_0["age"],df_0["height"])
plt.fill_between(x, low_y50, high_y50, alpha=0.6, color="darkgray")
plt.fill_between(x, low_y95, high_y95, alpha=0.3, color="gray")

